name = succession_c
lowername = succession_c

# Build file for succession_c
# Generated at 01/04/21 22:26:43

stagedir = _
location = /usr/bin
dragondir = $$DRAGONBUILD
sysroot = -isysroot $dragondir/sdks/iPhoneOS.sdk
proj_build_dir = .dragon
objdir = $proj_build_dir/obj
signdir = $proj_build_dir/sign
builddir = $proj_build_dir/build
build_target_file = $proj_build_dir/$stagedir/$location/$name
pwd = .
resource_dir = Resources
toolchain-prefix = arm64-apple-darwin14-

stage = true
stage2 = true;


internalsigntarget = $signdir/$build_target_file.unsigned
internalsymtarget = $signdir/$build_target_file.unsym

fwSearch = -F$dragondir/sdks/iPhoneOS.sdk/System/Library/PrivateFrameworks/ $
    -F$dragondir/frameworks
libSearch = -L$dragondir/lib -L.
modulesinternal = -fmodules -fcxx-modules -fmodule-name=$name $
    -fbuild-session-file=$proj_build_dir/modules/ $
    -fmodules-validate-once-per-build-session -fmodules-prune-after=345600 $
    -fmodules-prune-interval=86400

cc = clang
codesign = ldid
cxx = clang++
dsym = dsymutil
ld = clang++
lipo = lipo
logos = $dragondir/src/logos/bin/logos.pl
optool = $dragondir/bin/optool
plutil = plutil
swift = swift

targetvers = 10.0
targetprefix = -miphoneos-version-min=
targetos = iphoneos
triple = 

frameworks = -framework UIKit -framework Foundation -framework $
    SpringBoardServices
libs = 

macros = 
arc = -fobjc-arc
btarg = 
debug = -fcolor-diagnostics
entfile = 
entflag = -S
optim = 0
warnings = -Wall

cinclude = -I$dragondir/include -I$dragondir/vendor/include $
    -I$dragondir/include/_fallback -I$DRAGONBUILD/headers/ -I$pwd
header_includes = 
public_headers = 

usrCflags = 
usrLDflags = 

libflags = 
lopts = 
typeldflags = 

cflags = 
ldflags = 
lflags = 
lfflags = 
swiftflags = 

theosshim = -include$$DRAGONBUILD/include/PrefixShim.h -w
internalcflags = $cinclude $debug $fwSearch $cflags $btarg -O$optim  $
    $targetprefix$targetvers $sysroot $header_includes $arc $triple $
    $theosshim $macros $warnings $modulesinternal
internalldflags = $internalcflags $typeldflags $frameworks $libs $libflags $
    $lopts $libSearch $ldflags $libs
internallflags = 
internallfflags = 
internalswiftflags = -color-diagnostics -enable-objc-interop -sdk $
    /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk $
    -L/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos $
    -g -L/usr/lib/swift -swift-version 5 -module-name $name

rule linkarmv7
  command = $ld -arch armv7 $internallflags $internalldflags -o $out $in 
  description = Linking $in with $ld [armv7]
rule linkarm64
  command = $ld -arch arm64 $internallflags $internalldflags -o $out $in 
  description = Linking $in with $ld [arm64]
rule linkarm64e
  command = $ld -arch arm64e $internallflags $internalldflags -o $out $in 
  description = Linking $in with $ld [arm64e]
rule stage
  command = $stage && $stage2
  description = Running Stage for $name
rule debug
  command = $dsym \"$in\" 2&> /dev/null; cp $in $out
  description = Generating Debug Symbols for $name
rule objcarmv7
  command = $cc -arch armv7 $internalcflags -c $in -o $out
  description = Compiling $in with $cc [armv7]
rule objcarm64
  command = $cc -arch arm64 $internalcflags -c $in -o $out
  description = Compiling $in with $cc [arm64]
rule sign
  command = $codesign $entflag$entfile $in && cp $in $out
  description = Signing $name
rule lipo
  command = $lipo -create $in -output $out
  description = Merging architechtures
rule objcarm64e
  command = $cc -arch arm64e $internalcflags -c $in -o $out
  description = Compiling $in with $cc [arm64e]

build $builddir/armv7/hardware.m.o: objcarmv7 hardware.m
build $builddir/armv7/test.m.o: objcarmv7 test.m
build $builddir/$name.armv7: linkarmv7 $builddir/armv7/hardware.m.o $
    $builddir/armv7/test.m.o
build $builddir/arm64/hardware.m.o: objcarm64 hardware.m
build $builddir/arm64/test.m.o: objcarm64 test.m
build $builddir/$name.arm64: linkarm64 $builddir/arm64/hardware.m.o $
    $builddir/arm64/test.m.o
build $builddir/arm64e/hardware.m.o: objcarm64e hardware.m
build $builddir/arm64e/test.m.o: objcarm64e test.m
build $builddir/$name.arm64e: linkarm64e $builddir/arm64e/hardware.m.o $
    $builddir/arm64e/test.m.o
build $internalsymtarget: lipo $builddir/$name.armv7 $builddir/$name.arm64 $
    $builddir/$name.arm64e
build $internalsigntarget: debug $internalsymtarget
build $build_target_file: sign $internalsigntarget
build stage: stage build.ninja

default $build_target_file
